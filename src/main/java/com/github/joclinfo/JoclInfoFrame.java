/*
 * Copyright 2013 Matthias Schorsch.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.github.joclinfo;

import java.awt.CardLayout;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.AbstractAction;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import org.jdesktop.swingx.combobox.ListComboBoxModel;

/**
 *
 * @author Matthias Schorsch
 */
class JoclInfoFrame extends JFrame {

    private final List<PlatformDevice> platformDevices;

    public JoclInfoFrame(List<PlatformDevice> platformDevices) {
        this.platformDevices = platformDevices;
        initComponents();
        init();
    }

    private void init() {
        taskOpenCL.add(new AbstractAction("Device") {
            @Override
            public void actionPerformed(ActionEvent e) {
                changeCard("DEVICE_CARD");
            }
        });
        taskOpenCL.add(new AbstractAction("Capabilities") {
            @Override
            public void actionPerformed(ActionEvent e) {
                changeCard("CAPABILITIES_CARD");
            }
        });
        taskOpenCL.add(new AbstractAction("Extensions") {
            @Override
            public void actionPerformed(ActionEvent e) {
                changeCard("EXTENSIONS_CARD");
            }
        });
        taskInfo.add(new AbstractAction("About") {
            @Override
            public void actionPerformed(ActionEvent e) {
                changeCard("ABOUT_CARD");
            }
        });

        changeDevice(getSelectedPlatformDevice());
    }

    private void changeCard(String card) {
        CardLayout cardLayout = (CardLayout) plSide.getLayout();
        cardLayout.show(plSide, card);
    }

    private ImageIcon readApplicationIcon() {
        try {
            return new ImageIcon(ImageIO.read(JoclInfoFrame.class.getResourceAsStream("joclinfo.png")));
        } catch (IOException ex) {
            Logger.getLogger(JoclInfoFrame.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new RuntimeException(ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        plBackground = new javax.swing.JPanel();
        taskContainer = new org.jdesktop.swingx.JXTaskPaneContainer();
        cbDeviceChooser = new javax.swing.JComboBox();
        taskOpenCL = new org.jdesktop.swingx.JXTaskPane();
        taskInfo = new org.jdesktop.swingx.JXTaskPane();
        plSide = new javax.swing.JPanel();
        plDevice = new com.github.joclinfo.DevicePanel();
        plCapabilities = new com.github.joclinfo.CapabilitiesPanel();
        plExtensions = new com.github.joclinfo.ExtensionsPanel();
        plAbout = new com.github.joclinfo.AboutPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JOCL Info");
        setIconImage(readApplicationIcon().getImage());
        setLocationByPlatform(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        plBackground.setLayout(new java.awt.GridBagLayout());

        org.jdesktop.swingx.VerticalLayout verticalLayout1 = new org.jdesktop.swingx.VerticalLayout();
        verticalLayout1.setGap(14);
        taskContainer.setLayout(verticalLayout1);

        cbDeviceChooser.setModel(new ListComboBoxModel<PlatformDevice>(platformDevices));
        cbDeviceChooser.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbDeviceChooserItemStateChanged(evt);
            }
        });
        taskContainer.add(cbDeviceChooser);

        taskOpenCL.setTitle("Open CL");
        taskContainer.add(taskOpenCL);

        taskInfo.setTitle("Info");
        taskContainer.add(taskInfo);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        plBackground.add(taskContainer, gridBagConstraints);

        plSide.setLayout(new java.awt.CardLayout());

        plDevice.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Device", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N
        plSide.add(plDevice, "DEVICE_CARD");

        plCapabilities.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Capabilities", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N
        plCapabilities.setLayout(new java.awt.GridLayout(1, 0));
        plSide.add(plCapabilities, "CAPABILITIES_CARD");

        plExtensions.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Extensions", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N
        plExtensions.setLayout(new java.awt.GridLayout(1, 0));
        plSide.add(plExtensions, "EXTENSIONS_CARD");

        plAbout.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "About", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N
        plAbout.setLayout(new java.awt.GridLayout(1, 0));
        plSide.add(plAbout, "ABOUT_CARD");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        plBackground.add(plSide, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(plBackground, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbDeviceChooserItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbDeviceChooserItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            PlatformDevice platformDevice = getSelectedPlatformDevice();
            changeDevice(platformDevice);
        }
    }//GEN-LAST:event_cbDeviceChooserItemStateChanged

    private void changeDevice(PlatformDevice platformDevice) {
        if (platformDevice != null) {
            for (Component component : plSide.getComponents()) {
                if (component instanceof PanelUpdater) {
                    PanelUpdater panelUpdater = (PanelUpdater) component;
                    panelUpdater.update(platformDevice);
                }
            }
        }
    }

    private PlatformDevice getSelectedPlatformDevice() {
        return (PlatformDevice) cbDeviceChooser.getSelectedItem();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cbDeviceChooser;
    private com.github.joclinfo.AboutPanel plAbout;
    private javax.swing.JPanel plBackground;
    private com.github.joclinfo.CapabilitiesPanel plCapabilities;
    private com.github.joclinfo.DevicePanel plDevice;
    private com.github.joclinfo.ExtensionsPanel plExtensions;
    private javax.swing.JPanel plSide;
    private org.jdesktop.swingx.JXTaskPaneContainer taskContainer;
    private org.jdesktop.swingx.JXTaskPane taskInfo;
    private org.jdesktop.swingx.JXTaskPane taskOpenCL;
    // End of variables declaration//GEN-END:variables
}
